/* eslint-disable no-case-declarations */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { CSSProperties } from "react";

export type LinkPrefix = `git@repo.techngs.us`;
export type LinkedDataContext = `${LinkPrefix}:${string}`;
export type LinkedDataId = `${LinkPrefix}:${string}/${string}`;
export type NodeId = LinkedDataId;
export type EdgeId = LinkedDataId;
export type HandleId = `${LinkedDataId}/${string}/${string}`
import { Position } from "reactflow";


export interface LinkedData {
  "@context": LinkedDataContext | undefined; // "git:repo.techngs.us:path/to/metamodel",
  "@id": LinkedDataId | undefined; // "git:repo.techngs.us:path/to/identity"
}

export enum NodeType {
  Actor = 'Actor',
  App = 'App',
  CLIN = 'CLIN',
  Component = 'Component',
  Contract = 'Contract',
  CoreService = 'CoreService',
  Database = 'Database',
  Microservice = 'Microservice',
  Service = 'Service',
  User = 'User',
  UserGroup = 'UserGroup',
  UserRole = 'UserRole',
  YoutrackIssue = 'YoutrackIssue',
  FinalFlowPoint = 'FinalFlowPoint',
  UseCase = 'UseCase',
  StartFlowPoint = 'StartFlowPoint',
  Decision = 'Decision',
  Action = 'Action'

}

export type NodeReferenceType = keyof typeof NodeType;


export enum EdgeType {
  Requires = 'Requires',
  SubscribesTo = 'SubscribesTo',
  Fulfills = 'Fulfills',
  Satisfies = 'Satisfies',
  DependsOn = 'DependsOn',
  Undefined = 'Undefined',
}


export type EdgeReferenceType = keyof typeof EdgeType


//export type LinkMap = { [key in EdgeType] : (ServiceName | CoreServiceName | AppName | DependencyName)[] }

export interface INode<Type = NodeReferenceType> extends LinkedData {
  data?: Record<any, string> | Record<any, number[]>;
  "@id": NodeId;
  type: Type;
  name: string;
}

// These node interfaces should exist for every NodeType
export interface AppNode extends INode<typeof NodeType.App> { }

export interface YouTrackIssue extends INode<typeof NodeType.YoutrackIssue> {
  data?: { project: string }

}


export interface User extends INode<typeof NodeType.User> { 
  data? : {entityName: string }
}

export interface Actor extends INode<typeof NodeType.Actor> {
  data? : {entityName: string, role: string}
}

export interface Action extends INode<typeof NodeType.Action> {
  data? : { actionDescription: string } 
}

export interface DatabaseNode extends INode<typeof NodeType.Database> {
  data?: { ports: number[] };
}

export interface IEdge<Source = NodeReferenceType, Target = NodeReferenceType, T = EdgeReferenceType> extends LinkedData {
  "@id": EdgeId;
  type: T;
  sourceType: Source;
  sourceLink: string; // JSON-LD uri
  targetType: Target;
  targetLink: string; // JSON-LD uri
}

// These edge interfaces should exist for every EdgeType
export interface RequireDependencyEdge extends IEdge<typeof NodeType.App, typeof NodeType.Database> { }
export interface FulfillsEdge extends IEdge<typeof NodeType.CLIN, typeof NodeType.Contract> { }


export interface Model extends LinkedData {
  nodes: INode[],
  edges: IEdge[],
}
/*
export interface ModelNode<TName> extends INode {
  data?: { [key:string] : (string | number | boolean)}; // TBD
}*/

// VIEW DATA - Only for positioning and style

export type XYPosition = {
  x: number;
  y: number;
}

export interface ViewModelNode extends LinkedData {
  nodeLink?: NodeId; // JSON-LD uri of ModelNode
  position?: XYPosition;
  style?: CSSProperties; // CSS Properties
  className?: string;
  width?: number | null;
  height?: number | null;
  parentNode?: NodeId;
  zIndex?: number;
  handles?: ViewModelHandle[];
  type?: string;
  typeAssociated?: INode
  isStructural?: boolean // If false, placed inside behavioral sidebar for use, else place inside structural tab of sidebar for use. 

}

export const ViewModelNodeDefaultColor = "#ffffff"

// ** Test of dynamic creation of node types // Minimum reqs, define a type name and a shape. Handles is good to provide too otherwise the node will not be able to interact with its environment. 
// I don't want to change @context or @id to optional props, so for now a user can define these as undefined here just for the sake of providing. @context is to be inferred and @id is autogenerated using helper methods. 
export const UserCreatedNodes: ViewModelNode[] =[{type: 'Actor', handles: [{"@id": undefined, type: "source", position: Position.Bottom, "@context": undefined}], style: {backgroundColor: ViewModelNodeDefaultColor, width: "70px", height: "70px", borderRadius: "50%", alignContent: "center", textAlign: "center" }, "@context": undefined, "@id": undefined, isStructural: false}, 
{type: 'UseCase', handles: [{"@id": undefined, type: "source", position: Position.Bottom, "@context": undefined}, {"@id": undefined, type: "target", position: Position.Top, "@context": undefined}], style: {backgroundColor: ViewModelNodeDefaultColor, width: "100px", height: "60px", borderRadius: "25%", alignContent: "center", textAlign: "center" }, "@context": undefined, "@id": undefined, isStructural: false} ]


export type ViewModelHandleType = 'source' | 'target';

export interface ViewModelHandle extends LinkedData {
  "@id": HandleId | undefined;
  type: ViewModelHandleType;
  position: Position

}


export enum MarkerType {
  arrow = 'arrow',
  arrowclosed = 'arrowclosed',
  none = 'none',
}

export type EdgeMarker = {
  type: keyof typeof MarkerType; // 'arrow' or 'arrowclosed'
  color?: string; // arrow fill color
  width?: number;
  height?: number;
  markerUnits?: string; // defines the coordinate system https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/markerUnits
  orient?: string; // defines rotation - 'auto' | 'auto-start-reverse' | number
  strokeWidth?: number;
}

export interface ViewModelEdge extends LinkedData {
  edgeLink: string; 
  sourceID:  NodeId; 
  targetID: NodeId;
  markerStart: EdgeMarker;
  markerEnd: EdgeMarker;
}
/*
type Edge<T = any> = {
  id: string;
  type?: string;
  source: string;
  target: string;
  sourceHandle?: string | null;
  targetHandle?: string | null;
  label?: string | ReactNode;
  labelStyle?: CSSProperties;
  labelShowBg?: boolean;
  labelBgStyle?: CSSProperties;
  labelBgPadding?: [number, number];
  labelBgBorderRadius?: number;
  style?: CSSProperties;
  animated?: boolean;
  hidden?: boolean;
  deletable?: boolean;
  focusable?: boolean;
  data?: T;
  className?: string;
  sourceNode?: Node;
  targetNode?: Node;
  selected?: boolean;
  markerStart?: EdgeMarkerType;
  markerEnd?: EdgeMarkerType;
  zIndex?: number;
  ariaLabel?: string;
  interactionWidth?: number;
};
*/

export interface ViewModel extends LinkedData {
  viewModelNodes: ViewModelNode[];
  viewModelEdges: ViewModelEdge[];
}